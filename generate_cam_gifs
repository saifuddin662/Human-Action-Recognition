#!/bin/bash

# create_cam_gif <model> <character> <npz_file>
function create_cam_gif() {
    final_gif_name="../data_dir/cam_output/$1/$2/$3/$2_$3.gif"
    mkdir -p ../data_dir/cam_output/$1/$2/$3
    CUDA_VISIBLE_DEVICES='' DISPLAY=:2 python cam_animation.py --weight-directory ../data_dir/weights/$1 --data-directory ../data_dir/simpsons_dataset --image-path ../data_dir/simpsons_dataset/$2/$3 --cam-path ../data_dir/cam_output/$1/$2/$3 --weight-limit 100
    convert -delay 30  -size 256x256 ../data_dir/cam_output/$1/$2/$3/*.png -loop 0 $final_gif_name
}

function create_cam_frame() {
    model=$1
    character=$2
    weight_file=$3
    shift; shift; shift;
    files=$@
    mkdir -p ../data_dir/cam_output/$model/$character
    CUDA_VISIBLE_DEVICES='' DISPLAY=:2 python cam_animation.py --weight-file $weight_file --data-directory ../data_dir/simpsons_dataset --cam-path ../data_dir/cam_output/$model/$character --images $files
}

max_jobs=8
max_convert_jobs=20

if [[ $# == 3 ]]; then
    create_cam_gif $@
elif [[ $# == 2 ]]; then
    model=$1
    character=$2
    for weight in ../data_dir/weights/$model/*.h5
    do
        if [[ -f $weight ]]; then
            while [ $(jobs | wc -l) -ge $max_jobs ]; do sleep 1; done
            create_cam_frame $model $character $weight ../data_dir/simpsons_dataset/$character/pic_00*.npz &
        fi
    done
    wait
    for cam_output in ../data_dir/cam_output/$model/$character/*
    do
        if [ -d $cam_output ]; then
            filename=$(basename $cam_output)
            final_gif_name="$cam_output/$character_$filename.gif"
            while [ $(jobs | wc -l) -ge $max_convert_jobs ]; do sleep 1; done
            convert -delay 30  -size 256x256 $cam_output/*.png -loop 0 $final_gif_name &
        fi
    done
    wait
    echo "CAM generation complete."
else
    echo "./generate_cam_gifs <model> <character> <npz_file (optional)>"
fi
